package main

import (
	"flag"
	"fmt"
	"go/format"
	"os"

	"github.com/hergert/codo-agentic-toolkit/cli/internal/pack/zipbuild"
)

func main() {
	var (
		packDir = flag.String("pack", "", "path to pack directory")
		outFile = flag.String("out", "embedded_base_gen.go", "output Go file")
		stdout  = flag.Bool("stdout", false, "write zip bytes to stdout")
	)
	flag.Parse()

	if *packDir == "" {
		fmt.Fprintln(os.Stderr, "-pack is required")
		os.Exit(1)
	}

	zipBytes, err := zipbuild.Build(*packDir)
	if err != nil {
		fmt.Fprintf(os.Stderr, "build zip: %v\n", err)
		os.Exit(1)
	}

	if *stdout {
		if _, err := os.Stdout.Write(zipBytes); err != nil {
			fmt.Fprintf(os.Stderr, "write stdout: %v\n", err)
			os.Exit(1)
		}
		return
	}

	if err := writeGoFile(*outFile, zipBytes); err != nil {
		fmt.Fprintf(os.Stderr, "write go file: %v\n", err)
		os.Exit(1)
	}
}

func writeGoFile(target string, data []byte) error {
    src := fmt.Sprintf(`// Code generated by go generate; DO NOT EDIT.
package pack

func init() {
	embeddedBaseZip = []byte{%s}
}
`, bytesLiteral(data))

	formatted, err := format.Source([]byte(src))
	if err != nil {
		return fmt.Errorf("format source: %w", err)
	}

	return os.WriteFile(target, formatted, 0o644)
}

func bytesLiteral(b []byte) string {
	const line = 12
	var out string
	for i, v := range b {
		if i%line == 0 {
			out += "\n\t"
		}
		out += fmt.Sprintf("0x%02x, ", v)
	}
	if len(b) > 0 {
		out += "\n"
	}
	return out
}
