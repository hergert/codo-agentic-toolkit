{
  "PreToolUse": [
    {
      "matcher": "Edit|MultiEdit|Write",
      "hooks": [{
        "type": "command",
        "command": "python3 - <<'PY'\nimport json,sys,os\ne=json.load(sys.stdin)\np=e.get('tool_input',{}).get('file_path','') or ''\n# Allow docs & .claude edits always\nif p.startswith('docs/') or p.startswith('.claude/'): sys.exit(0)\n# Require plan approval marker for source edits\nallowed=os.path.exists('.claude/session/ALLOW_EDITS')\nif not allowed:\n  print('❌ Plan not approved: create marker with /approve-plan <task> before editing source.')\n  sys.exit(2)\n# Block sensitive targets\nfor bad in ('.env','/package-lock.json','/pnpm-lock.yaml','/yarn.lock','/.git/'):\n  if bad in p: print('❌ Blocked write:', p); sys.exit(2)\nsys.exit(0)\nPY"
      }]
    },
    {
      "matcher": "Bash(git commit*)|Bash(gh pr create*)|Bash(gh pr merge*)|Bash(npx wrangler deploy --env production*)|Bash(wrangler deploy --env production*)",
      "hooks": [{"type":"command","command":"python3 - <<'PY'\nimport sys; print('❌ Commits/PR merges/prod deploys are disabled. User must execute manually.'); sys.exit(2)\nPY"}]
    }
  ],
  "PostToolUse": [
    {
      "matcher": "Edit|MultiEdit|Write",
      "hooks": [{
        "type": "command",
        "command": "python3 - <<'PY'\nimport json,sys,subprocess,shlex\ne=json.load(sys.stdin); f=e.get('tool_input',{}).get('file_path','') or ''\nfmt=None\nif f.endswith('.go'): fmt=f'go fmt {shlex.quote(f)}'\nelif f.endswith(('.ts','.tsx','.js','.jsx')): fmt=f'npx prettier --write {shlex.quote(f)}'\nif fmt: subprocess.call(fmt, shell=True)\nprint('[format] done:', f)\nPY"
      }]
    },
    {
      "matcher": "Edit|MultiEdit|Write",
      "hooks": [{
        "type": "command",
        "command": "bash -lc 'git diff --shortstat || true'"
      }]
    }
  ],
  "Notification": [
    {"matcher": "Stop|SubagentStop", "hooks": [{"type": "command", "command": "echo '[Claude] Exit gate: go test ./... | Commits/deploys are user-only.'"}]}
  ]
}
