name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Semver tag to release (e.g., v1.8.0). Leave blank to auto-bump MINOR."
        required: false

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine release tag
        id: prep
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_TAG: ${{ inputs.tag }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          git config user.name "codo-bot"
          git config user.email "actions@users.noreply.github.com"

          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            if [ -n "$INPUT_TAG" ]; then
              TAG_NAME="$INPUT_TAG"
            else
              LATEST_TAG="$(git tag -l 'v*' --sort=-version:refname | head -n1 || true)"
              if [ -z "$LATEST_TAG" ]; then
                TAG_NAME="v1.0.0"
              else
                VERSION="${LATEST_TAG#v}"
                MAJOR="$(echo "$VERSION" | cut -d. -f1)"
                MINOR="$(echo "$VERSION" | cut -d. -f2)"
                MINOR=$((MINOR + 1))
                TAG_NAME="v${MAJOR}.${MINOR}.0"
              fi
            fi
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
          else
            TAG_NAME="$REF_NAME"
          fi

          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Checkout tag
        run: |
          git fetch --tags --force
          git checkout "$TAG_NAME"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: cli/go.mod
          check-latest: true
          cache: true
          cache-dependency-path: cli/go.sum

      - name: Prepare embedded pack & smoke build
        run: |
          ./scripts/embed-pack.sh
          go -C cli build -o /tmp/codo .

      - name: Run GoReleaser (tagged release)
        uses: goreleaser/goreleaser-action@v6
        with:
          version: '~> v1'
          args: release --clean
          workdir: ./cli
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package dotclaude pack asset
        run: |
          set -euo pipefail
          cd "$GITHUB_WORKSPACE"
          if [ -d pack ]; then
            zip -r "dotclaude-pack.zip" pack
            shasum -a 256 "dotclaude-pack.zip" > "dotclaude-pack.sha256"
          fi

      - name: Upload pack asset to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: |
            dotclaude-pack.zip
            dotclaude-pack.sha256
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
